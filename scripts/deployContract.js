const ethers = require("ethers");
const metadata = require("../artifacts/contracts/interfaces/Liquidator.sol/Liquidator.json");
const aave = require("../config/aave.json");
const config = require("../config/config.json");
require("dotenv").config();
const PROVIDER_URL = config.rpcUrl.local;
const MY_ACCOUNT = config.keys.fake;
const CHAIN = "polygon";
const WRAPPER_ADDRESS = aave[CHAIN].iWeth.address;
const WRAPPER_ABI = aave[CHAIN].iWeth.abi;

const LENDINGPOOL_ADDRESS = aave[CHAIN].v2.lendingPool.address;
const LENDINGPOOL_ABI = aave[CHAIN].v2.lendingPool.abi;
const RECEIVE_A_TOKEN = false;

const PRICE_ORACLE_ADDRESS = aave[CHAIN].priceOracle.address;
const PRICE_ORACLE_ABI = aave[CHAIN].priceOracle.abi;
async function deploy() {
  const provider = new ethers.providers.JsonRpcProvider(process.env[PROVIDER_URL]);
  const deployer = new ethers.Wallet(process.env[MY_ACCOUNT], provider);

  // Read the contract artifact, which was generated by Remix

  // Set gas limit and gas price, using the default Ropsten provider
  const price = ethers.utils.formatUnits(await provider.getGasPrice(), "gwei");
  const options = {
    gasLimit: 10000000,
    gasPrice: ethers.utils.parseUnits(price, "gwei")
  };

  // Deploy the contract
  const factory = new ethers.ContractFactory(metadata.abi, metadata.bytecode, deployer);

  const contract = await factory.deploy(options);
  await contract.deployed();
  console.log(`Deployment successful! Contract Address: ${contract.address}`);

  balance = await deployer.getBalance();
  console.log("My ETH balance: ", ethers.utils.formatEther(balance));
  await getErc20Balance(WRAPPER_ADDRESS, WRAPPER_ABI, deployer);
  console.log("-\n");

  await contract.liquidate({ value: "100000000000000000000" });

  balance = await deployer.getBalance();
  console.log("My ETH balance: ", ethers.utils.formatEther(balance));
  await getErc20Balance(WRAPPER_ADDRESS, WRAPPER_ABI, deployer);
  console.log("-\n");
}

async function getErc20Balance(erc20Address, abi, account) {
  const erc20Contract = new ethers.Contract(erc20Address, abi, account);
  const balance = await erc20Contract.balanceOf(account.address);
  const symbol = await erc20Contract.symbol();
  const decimals = await erc20Contract.decimals();
  console.log(`My ${symbol} balance: ${ethers.utils.formatUnits(balance, decimals)}`);
  return balance.toString();
}
deploy();
